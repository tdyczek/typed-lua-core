-- 1.
local error,result = "",1 in
    local idiv = fun(dividend:integer, divisor:integer): ((integer, integer)|(nil, string))
            local q,r = 0,0 in
                if divisor == 0 then
                    return nil, "divZero"
                else
                    r = dividend / divisor;
                    q = dividend % r;
                    return q, r 
    in
        local p,q = idiv(10,2) in
            if p then result = q else error =  q

-- 2. Unique -- Closed table
local b:{string:(integer|nil), "z":(1|nil)}_closed = {["x"]=1, ["y"]=2} in
   skip     

-- 3. Table construction

local idiv = fun(dividend:integer, divisor:integer): ((integer, integer)|(nil, string))
    skip 
in
    local a = {["x"] = 1, ["y"] = 2, idiv(10, 5)} in
        skip



-- 4. This should not typeckeck
local a : {}_unique = {} in
local b : {}_open = a in
    a["x"] <string> = "foo";
    b["x"] <integer> = 1

--5. Basic methods work
local tab:{number:string}_unique = {[1] = "jeden"} in
    fun tab:a(age:number):(number) return age


--6. Adding new method - subtype of other one
local tab:{"a":(number) -> (number)}_unique = { ["a"] = fun(x:number):(number) return x } in
    fun tab:a(age:number):(number) return age
    
--7. Basic recursion
rec a : ux.{"next":(x|nil)} = {["next"]=nil} in
    skip